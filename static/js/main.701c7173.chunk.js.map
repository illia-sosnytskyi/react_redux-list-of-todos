{"version":3,"sources":["features/todos.ts","features/currentTodo.ts","features/filter.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodosActionType","todoSelector","state","currentTodo","actions","todo","type","payload","currentTodoReducer","action","initialState","query","status","title","selectors","filter","filterReducer","selectedTodos","todos","completed","toLowerCase","includes","SetTodos","todosReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","selectedTodo","selectedTodoId","id","length","className","map","cn","onClick","currentTodoActions","selectTodo","TodoFilter","filterSelectors","handleQuery","filterActions","onSubmit","event","preventDefault","value","onChange","e","statusText","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","Loader","TodoModal","useState","user","setUser","getUserFromServer","a","userFromServer","Error","useEffect","href","email","name","App","loader","setLoader","currentGood","getTodosFromServer","todosFromServer","todosAction","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.701c7173.chunk.js","sourcesContent":["import type { RootState } from '../app/store';\nimport { Todo } from '../types/Todo';\n\nexport enum TodosActionType {\n  SetTodos = 'todos/SET',\n}\n\ntype SetTodosAction = {\n  type: TodosActionType.SetTodos;\n  payload: Todo[]\n};\n\nconst setTodos = (todos: Todo[]) => ({\n  type: TodosActionType.SetTodos,\n  payload: todos,\n});\n\ntype TodosAction = SetTodosAction;\n\nexport const selectedTodos = {\n  getTodos: (state: RootState) => state.todos,\n  getVisibleTodos: (state: RootState) => {\n    const { todos, filter } = state;\n    const { query, status } = filter;\n\n    const slectedByStatus = todos.filter(todo => {\n      switch (status) {\n        case 'active':\n          return todo.completed;\n\n        case 'completed':\n          return !todo.completed;\n\n        case 'all':\n        default:\n          return todo;\n      }\n    });\n\n    return slectedByStatus.filter(todo => (\n      todo.title.toLowerCase()\n        .includes(query.toLowerCase())\n    ));\n  },\n};\n\nconst todosReducer = (todos: Todo[] = [], action: TodosAction): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return [...action.payload];\n\n    default:\n      return todos;\n  }\n};\n\nexport const actions = { setTodos };\n\nexport default todosReducer;\n","import type { RootState } from '../app/store';\nimport { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nexport const todoSelector = {\n  getCurrentTodo: (state: RootState) => state.currentTodo,\n};\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = { setTodo, removeTodo };\n\nexport default currentTodoReducer;\n","import type { RootState } from '../app/store';\nimport { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'filter/query/SET',\n  payload: string,\n};\n\ntype SetStatusAction = {\n  type: 'filter/status/SET',\n  payload: Status,\n};\n\nconst setQuery = (title: string): SetQueryAction => ({\n  type: 'filter/query/SET',\n  payload: title,\n});\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/status/SET',\n  payload: status,\n});\n\ntype Action = SetQueryAction | SetStatusAction;\n\ntype State = {\n  query: string,\n  status: Status,\n};\n\nconst initialState: State = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  state: State = initialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'filter/query/SET':\n      return { ...state, query: action.payload };\n\n    case 'filter/status/SET':\n      return { ...state, status: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = { setQuery, setStatus };\nexport const selectors = {\n  getQuery: (state: RootState) => state.filter.query,\n  getStatus: (state: RootState) => state.filter.status,\n};\n\nexport default filterReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport cn from 'classnames';\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport { selectedTodos } from '../../features/todos';\nimport {\n  actions as currentTodoActions,\n  todoSelector,\n} from '../../features/currentTodo';\n\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(selectedTodos.getVisibleTodos);\n  const selectedTodo = useAppSelector(todoSelector.getCurrentTodo);\n\n  const selectedTodoId = selectedTodo?.id;\n\n  const selectTodo = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  return (\n    <>\n      {\n        todos.length === 0\n        && (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        )\n      }\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {todos.map(todo => (\n            <tr data-cy=\"todo\" key={todo.id}>\n              <td className=\"is-vcentered\">{todo.id}</td>\n\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p className={cn({\n                  'has-text-success': todo.completed,\n                  'has-text-danger': !todo.completed,\n                })}\n                >\n                  {todo.title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => selectTodo(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={cn('far fa-eye', {\n                      'far fa-eye-slash': todo.id === selectedTodoId,\n                    })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\n\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport {\n  actions as filterActions,\n  selectors as filterSelectors,\n} from '../../features/filter';\n\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const query = useAppSelector(filterSelectors.getQuery);\n  const status = useAppSelector(filterSelectors.getStatus);\n\n  const handleQuery = (title: string) => {\n    dispatch(filterActions.setQuery(title));\n  };\n\n  const handleSelect = (statusText: Status) => {\n    dispatch(filterActions.setStatus(statusText));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={(e) => handleSelect(e.target.value as Status)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(e) => handleQuery(e.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => handleQuery('')}\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useState, useEffect } from 'react';\n\nimport { getUser } from '../../api';\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\n\nimport {\n  actions as currentTodoActions,\n  todoSelector,\n} from '../../features/currentTodo';\n\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const selectedTodo = useAppSelector(todoSelector.getCurrentTodo);\n  const dispatch = useAppDispatch();\n\n  const closeModal = () => dispatch(currentTodoActions.removeTodo());\n\n  const getUserFromServer = async (userId: number) => {\n    try {\n      const userFromServer = await getUser(userId);\n\n      setUser(userFromServer);\n    } catch (err: any) {\n      throw new Error(err);\n    }\n  };\n\n  useEffect(() => {\n    if (selectedTodo) {\n      getUserFromServer(selectedTodo?.userId);\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {\n        !user\n          ? <Loader />\n          : (\n            <div className=\"modal-card\">\n              <header className=\"modal-card-head\">\n                <div\n                  className=\"modal-card-title has-text-weight-medium\"\n                  data-cy=\"modal-header\"\n                >\n                  {`Todo #${selectedTodo?.id}`}\n                </div>\n\n                {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n                <button\n                  type=\"button\"\n                  className=\"delete\"\n                  data-cy=\"modal-close\"\n                  onClick={closeModal}\n                />\n              </header>\n\n              <div className=\"modal-card-body\">\n                <p className=\"block\" data-cy=\"modal-title\">\n                  {selectedTodo?.title}\n                </p>\n\n                <p className=\"block\" data-cy=\"modal-user\">\n                  {!selectedTodo?.completed\n                    ? <strong className=\"has-text-danger\">Planned</strong>\n                    : (\n                      <>\n                        <strong className=\"has-text-success\">Done</strong>\n                        {' by '}\n                        <a href={`mailto:${user?.email}`}>\n                          {user?.name}\n                        </a>\n                      </>\n                    )}\n                </p>\n              </div>\n            </div>\n          )\n      }\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable max-len */\nimport React, {\n  useEffect, useState,\n} from 'react';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { actions as todosAction } from './features/todos';\n\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\n\nexport const App: React.FC = () => {\n  const [loader, setLoader] = useState(false);\n\n  const dispatch = useAppDispatch();\n  const currentGood = useAppSelector(state => state.currentTodo);\n\n  const getTodosFromServer = async () => {\n    try {\n      setLoader(true);\n      const todosFromServer = await getTodos();\n\n      dispatch(todosAction.setTodos(todosFromServer));\n    } catch (err: any) {\n      throw new Error(err);\n    } finally {\n      setLoader(false);\n    }\n  };\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              { loader\n                ? <Loader />\n                : (\n                  <TodoList />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentGood && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}